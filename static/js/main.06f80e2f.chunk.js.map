{"version":3,"sources":["components/Form/ContactsForm.module.css","components/Contacts/Contacts.module.css","components/Form/ContactsForm.jsx","components/Contacts/Contacts.jsx","components/Filter/Filter.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","ContactsForm","state","name","number","handleInput","target","value","setState","handleSubmit","e","preventDefault","validateFrom","props","onSubmit","checkExistingContacts","alert","this","className","s","container","type","onChange","Component","Contacts","contacts","deleteContact","length","map","id","button","data-key","onClick","empty","Filter","input","App","filter","isExistingContact","find","contact","addContact","newContact","shortid","generate","key","dataset","filterChange","currentTarget","getVisibleContacts","normalizedFilter","toLowerCase","includes","localStorage","getItem","parsedContacts","JSON","parse","prevProps","prevState","nextContact","setItem","stringify","filteredContacts","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06f80e2f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactsForm_container__so_Rq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"Contacts_name__25ers\",\"number\":\"Contacts_number__3xFN5\",\"button\":\"Contacts_button__3OGpI\",\"empty\":\"Contacts_empty__1zP8v\"};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport s from './ContactsForm.module.css';\n\nclass ContactsForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleInput = ({ target }) => {\n    const { name, value } = target;\n\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { name, number } = this.state;\n\n    const isValidFrom = this.validateFrom();\n    if (!isValidFrom) return;\n\n    this.props.onSubmit({ name, number });\n\n    this.setState({ name: '', number: '' });\n  };\n\n  validateFrom = () => {\n    const { name, number } = this.state;\n    const { checkExistingContacts } = this.props;\n\n    if (!name || !number) {\n      alert('Some input is empty');\n      return false;\n    }\n\n    return checkExistingContacts(name);\n  };\n\n  render() {\n    const { name, number } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <div className={s.container}>\n          <label>\n            Enter the name\n            <input\n              type=\"text\"\n              value={name}\n              name=\"name\"\n              onChange={this.handleInput}\n            />\n          </label>\n          <label>\n            Enter the number\n            <input\n              type=\"tel\"\n              value={number}\n              name=\"number\"\n              onChange={this.handleInput}\n            />\n          </label>\n        </div>\n\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n}\n\nexport default ContactsForm;\n\nContactsForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nimport s from './Contacts.module.css';\n\nexport default function Contacts({ contacts, deleteContact }) {\n  return (\n    <ul>\n      {contacts.length > 0 &&\n        contacts.map(({ name, number, id }) => {\n          return (\n            <li key={id}>\n              <span className={s.name}>Name: {name}</span>\n              <span className={s.number}>Number: {number}</span>\n              <button\n                className={s.button}\n                data-key={id}\n                onClick={deleteContact}\n              >\n                Delete\n              </button>\n            </li>\n          );\n        })}\n      {contacts.length === 0 && <li className={s.empty}>List is Empty</li>}\n    </ul>\n  );\n}\n\nContacts.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    }),\n  ),\n};\n","import PropTypes from 'prop-types';\n\nimport s from './Filter.module.css';\n\nexport default function Filter({ value, onChange }) {\n  return (\n    <label>\n      Filter\n      <input\n        className={s.input}\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n      />\n    </label>\n  );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import shortid from \"shortid\";\n\nimport React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport ContactsForm from \"./components/Form/ContactsForm\";\nimport Contacts from \"./components/Contacts/Contacts\";\nimport Filter from \"./components/Filter/Filter\";\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n  };\n\n  componentDidMount() {\n    const contacts = localStorage.getItem(\"contacts\");\n    const parsedContacts = JSON.parse(contacts);\n\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const nextContact = this.state.contacts;\n    const prevContact = prevState.contacts;\n\n    if (nextContact !== prevContact) {\n      localStorage.setItem(\"contacts\", JSON.stringify(nextContact));\n    }\n  }\n\n  checkExistingContacts = (name) => {\n    const isExistingContact = !!this.state.contacts.find((contact) => {\n      return contact.name === name;\n    });\n\n    isExistingContact && alert(`${name} is already in your contacts`);\n\n    return !isExistingContact;\n  };\n\n  addContact = (contact) => {\n    const newContact = {\n      id: shortid.generate(),\n      ...contact,\n    };\n\n    this.setState(({ contacts }) => ({\n      contacts: [newContact, ...contacts],\n    }));\n  };\n\n  deleteContact = (e) => {\n    const key = e.target.dataset.key;\n\n    this.setState(({ contacts }) => ({\n      contacts: contacts.filter((contact) => {\n        return contact.id !== key;\n      }),\n    }));\n  };\n\n  filterChange = (e) => {\n    this.setState({\n      filter: e.currentTarget.value,\n    });\n  };\n\n  getVisibleContacts = () => {\n    const normalizedFilter = this.state.filter.toLowerCase();\n    return this.state.contacts.filter((contact) => {\n      return contact.name.toLowerCase().includes(normalizedFilter);\n    });\n  };\n\n  render() {\n    const filteredContacts = this.getVisibleContacts();\n\n    return (\n      <div className=\"container\">\n        <div>\n          <h1>Phonebook</h1>\n          <ContactsForm\n            onSubmit={this.addContact}\n            checkExistingContacts={this.checkExistingContacts}\n          />\n          <Filter value={this.state.filter} onChange={this.filterChange} />\n        </div>\n        <div>\n          <h2>Contacts</h2>\n          <Contacts\n            contacts={filteredContacts}\n            deleteContact={this.deleteContact}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}